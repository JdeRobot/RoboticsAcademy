// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `pose3dencoders.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var jderobot = require("common").jderobot;
    var Slice = Ice.Slice;

    /**
     * ptencoders dat information 
     **/
    jderobot.Pose3DEncodersData = Slice.defineObject(
        function(x, y, z, pan, tilt, roll, clock, maxPan, maxTilt, minPan, minTilt)
        {
            Ice.Object.call(this);
            this.x = x !== undefined ? x : 0.0;
            this.y = y !== undefined ? y : 0.0;
            this.z = z !== undefined ? z : 0.0;
            this.pan = pan !== undefined ? pan : 0.0;
            this.tilt = tilt !== undefined ? tilt : 0.0;
            this.roll = roll !== undefined ? roll : 0.0;
            this.clock = clock !== undefined ? clock : 0;
            this.maxPan = maxPan !== undefined ? maxPan : 0.0;
            this.maxTilt = maxTilt !== undefined ? maxTilt : 0.0;
            this.minPan = minPan !== undefined ? minPan : 0.0;
            this.minTilt = minTilt !== undefined ? minTilt : 0.0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::jderobot::Pose3DEncodersData"
        ],
        -1,
        function(__os)
        {
            __os.writeFloat(this.x);
            __os.writeFloat(this.y);
            __os.writeFloat(this.z);
            __os.writeFloat(this.pan);
            __os.writeFloat(this.tilt);
            __os.writeFloat(this.roll);
            __os.writeInt(this.clock);
            __os.writeFloat(this.maxPan);
            __os.writeFloat(this.maxTilt);
            __os.writeFloat(this.minPan);
            __os.writeFloat(this.minTilt);
        },
        function(__is)
        {
            this.x = __is.readFloat();
            this.y = __is.readFloat();
            this.z = __is.readFloat();
            this.pan = __is.readFloat();
            this.tilt = __is.readFloat();
            this.roll = __is.readFloat();
            this.clock = __is.readInt();
            this.maxPan = __is.readFloat();
            this.maxTilt = __is.readFloat();
            this.minPan = __is.readFloat();
            this.minTilt = __is.readFloat();
        },
        false);

    jderobot.Pose3DEncodersDataPrx = Slice.defineProxy(Ice.ObjectPrx, jderobot.Pose3DEncodersData.ice_staticId, undefined);

    Slice.defineOperations(jderobot.Pose3DEncodersData, jderobot.Pose3DEncodersDataPrx);

    /**
     * Interface to the ptencoders sensor.
     **/
    jderobot.Pose3DEncoders = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::jderobot::Pose3DEncoders"
        ],
        -1, undefined, undefined, false);

    jderobot.Pose3DEncodersPrx = Slice.defineProxy(Ice.ObjectPrx, jderobot.Pose3DEncoders.ice_staticId, undefined);

    Slice.defineOperations(jderobot.Pose3DEncoders, jderobot.Pose3DEncodersPrx,
    {
        "getPose3DEncodersData": [, 2, 2, , , ["jderobot.Pose3DEncodersData", true], , , , , true]
    });
    exports.jderobot = jderobot;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
