FROM nvidia/cuda:11.8.0-base-ubuntu22.04

# Make all NVIDIA GPUS visible
ARG NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES all
ENV VIRTUALGL_VERSION=3.0.2
ENV TURBOVNC_VERSION=3.0.3

# Setup NON INTERACTIVE ENVIRONMENT
ENV DEBIAN_FRONTEND=noninteractive

# Install locales to prevent errors
RUN apt-get clean && \
    apt-get update && \
    apt-get install --no-install-recommends -y locales && \
    rm -rf /var/lib/apt/lists/* && \
    locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

ENV ROS_DISTRO=humble
ENV AMENT_PREFIX_PATH=/opt/ros/${ROS_DISTRO}
ENV COLCON_PREFIX_PATH=/opt/ros/${ROS_DISTRO}
ENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/${ROS_DISTRO}/opt/rviz_ogre_vendor/lib:/opt/ros/${ROS_DISTRO}/lib/x86_64-linux-gnu:/opt/ros/${ROS_DISTRO}/lib:/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:
ENV PATH=/opt/ros/${ROS_DISTRO}/bin:$PATH
ENV PYTHONPATH=/opt/ros/${ROS_DISTRO}/lib/python3.10/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2

# Install common tools
RUN apt-get update && apt-get install -y \
  software-properties-common \
  bash-completion \
  apt-utils \
  build-essential \
  git curl wget cmake \
  nano vim \
  gnupg \
  lsb-release \
  sudo \
  net-tools \
  && rm -rf /var/lib/apt/lists/* 

# Install ROS2 and ROS packages
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
  && apt-get update && apt-get install -y \
    ros-${ROS_DISTRO}-ros-base \
    ros-${ROS_DISTRO}-xacro \
    ros-${ROS_DISTRO}-joint-state-publisher \
    ros-${ROS_DISTRO}-rviz2 \
    python3-colcon-common-extensions \
    python3-pip python3-rosdep python3-vcstool \
    python3-argcomplete \
  && rosdep init \
  && rm -rf /var/lib/apt/lists/*

# Install Gazebo 11
RUN sudo rosdep fix-permissions \
  && rosdep update \
  && apt-get update && apt-get install -q -y \
    ros-${ROS_DISTRO}-gazebo* \
    ros-${ROS_DISTRO}-ros-gz-* \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    libgstreamer-plugins-base1.0-dev \
    libimage-exiftool-perl \
  && apt-get -y autoremove \
  && apt-get clean autoclean \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN mkdir ~/.gazebo && touch ~/.gazebo/gui.ini

# Install VNC
# Xorg segfault error mitigation
RUN apt-get update && apt-get install -y --no-install-recommends \
    dbus-x11 \
    libdbus-c++-1-0v5 \
    xvfb xauth xfonts-base xkb-data x11-xkb-utils \
    x11vnc \
    xterm \
    xserver-xorg-video-dummy \
    x11-apps \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
  && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

RUN wget https://xpra.org/xorg.conf \
  && rm -rf /tmp/*

# Install noVNC and websockify
RUN git clone -b v1.4.0 https://github.com/novnc/noVNC.git
RUN cd /noVNC/utils && git clone -b v0.11.0 https://github.com/novnc/websockify.git

# VirtualGL and TurboVNC
COPY ./gpu/virtualgl_${VIRTUALGL_VERSION}_amd64.deb ./gpu/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb ./gpu/turbovnc_${TURBOVNC_VERSION}_amd64.deb /

RUN dpkg --add-architecture i386 && apt-get update && apt-get install -y \
    libxtst6:i386 \
    libxv1:i386 \
    libglu1-mesa:i386 \
    libegl1-mesa:i386 \
    libegl1-mesa:amd64

RUN apt-get update && dpkg -i /virtualgl_${VIRTUALGL_VERSION}_amd64.deb /virtualgl32_${VIRTUALGL_VERSION}_amd64.deb \
  && rm /virtualgl_${VIRTUALGL_VERSION}_amd64.deb /virtualgl32_${VIRTUALGL_VERSION}_amd64.deb \
  && chmod u+s /usr/lib/libvglfaker.so \
  && chmod u+s /usr/lib/libdlfaker.so \
  && chmod u+s /usr/lib32/libvglfaker.so \
  && chmod u+s /usr/lib32/libdlfaker.so \
  && chmod u+s /usr/lib/i386-linux-gnu/libvglfaker.so \
  && chmod u+s /usr/lib/i386-linux-gnu/libdlfaker.so \
  && apt-get update && apt-get install -y --no-install-recommends \
    /turbovnc_${TURBOVNC_VERSION}_amd64.deb \
  && rm turbovnc_${TURBOVNC_VERSION}_amd64.deb \
  && rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
  apt-get install -y lxde-common && \
  rm -rf /var/lib/apt/lists/*


# RUN echo -e "no-remote-connections\n\
# no-httpd\n\
# no-x11-tcp-connections\n\
# no-pam-sessions\n\
# permitted-security-types = None, VNC, otp\
# " > /etc/turbovncserver-security.conf

ENV PATH "$PATH:/opt/VirtualGL/bin:/opt/TurboVNC/bin"

# Node
RUN curl -sL https://deb.nodesource.com/setup_16.x | bash - \
  && apt-get install -y nodejs \
  && npm install -g yarn

# Install Python 3 pip build dependencies first
RUN python3.10 -m pip install --upgrade pip==23.3.1 wheel==0.41.3 setuptools==69.0.2

# pip install dependencies
RUN python3.10 -m pip install \
    pylint==2.17.4 transitions==0.9.0 pydantic==2.4.2 websocket-client==1.5.2 \
    argparse==1.4.0 coverage==6.2 cerberus==1.3.4 empy==3.3.4 jinja2==3.0.3 kconfiglib==14.1.0 \
    matplotlib==3.0.* numpy==1.24.3 nunavut==1.1.0 packaging==21.3 pkgconfig==1.5.5 pyros-genmsg==0.5.8 \
    pyulog==1.0.1 pyyaml==5.4.1 requests==2.31.0 serial==0.0.97 six==1.16.0 toml==0.10.2 psutil==5.9.0 \
    onnxruntime==1.15.0 Pillow==9.0.1 opencv-python==4.5.5.64 netron seaborn==0.11.2

# websocket server dependency
RUN python3.10 -m pip install websocket_server==0.6.4 posix-ipc==1.1.1 django==4.1.7 djangorestframework==3.13.1 \
    django-webpack-loader==1.5.0 django-cors-headers==3.14.0 websockets==11.0.3 asyncio==3.4.3

# PX4 pip installs 
RUN python3.10 -m pip install jsonschema==4.18.0

# PX4 Dependencies
RUN apt-get update && apt-get install -y \
    astyle \
    gdb \
    lcov \
    libfuse2 \
    ninja-build \
    rsync \
    shellcheck \
  && rm -rf /var/lib/apt/lists/* 

# Install PX4
RUN git clone -b v1.14.0 https://github.com/PX4/PX4-Autopilot.git --recursive \
  && cd /PX4-Autopilot \
  && DONT_RUN=1 make px4_sitl gazebo

# https://github.com/JdeRobot/RoboticsAcademy/issues/2310
RUN echo 'param set-default COM_OF_LOSS_T 5' >> /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/px4-rc.params

RUN git clone -b v2.4.1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git /tmp/MicroXRCEAgent \
  && cd /tmp/MicroXRCEAgent \
  && mkdir build && cd build \
  && cmake .. \
  && make -j $(nproc) \
  && make install \
  && ldconfig /usr/local/lib/ \
  && rm -rf /tmp/*

# Create workspace and add drone packages
RUN mkdir -p /home/drones_ws/src/
RUN git clone https://github.com/JdeRobot/aerostack2.git /home/drones_ws/src/aerostack2
RUN git clone https://github.com/pawanw17/as2_platform_pixhawk.git /home/drones_ws/src/aerostack2/as2_platform_pixhawk
RUN git clone https://github.com/pawanw17/px4_msgs.git /home/drones_ws/src/px4_msgs

# Compiling and sourcing the workspace
WORKDIR /home/drones_ws/
RUN apt-get update && rosdep update && rosdep install -y -r -q --from-paths src --ignore-src --rosdistro ${ROS_DISTRO}
RUN /bin/bash -c "source /opt/ros/humble/setup.bash; colcon build --symlink-install"

# Download and install OMPL library
COPY install-ompl-ubuntu.sh /
WORKDIR /
RUN chmod u+x install-ompl-ubuntu.sh
RUN ./install-ompl-ubuntu.sh --python
