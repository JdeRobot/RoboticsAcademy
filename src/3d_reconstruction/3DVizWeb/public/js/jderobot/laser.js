// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `laser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var jderobot = require("common").jderobot;
    var Slice = Ice.Slice;

    jderobot.LaserData = Slice.defineObject(
        function(distanceData, numLaser, minAngle, maxAngle, minRange, maxRange, timeStamp)
        {
            Ice.Object.call(this);
            this.distanceData = distanceData !== undefined ? distanceData : null;
            this.numLaser = numLaser !== undefined ? numLaser : 0;
            this.minAngle = minAngle !== undefined ? minAngle : 0.0;
            this.maxAngle = maxAngle !== undefined ? maxAngle : 0.0;
            this.minRange = minRange !== undefined ? minRange : 0.0;
            this.maxRange = maxRange !== undefined ? maxRange : 0.0;
            this.timeStamp = timeStamp !== undefined ? timeStamp : new jderobot.Time();
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::jderobot::LaserData"
        ],
        -1,
        function(__os)
        {
            jderobot.IntSeqHelper.write(__os, this.distanceData);
            __os.writeInt(this.numLaser);
            __os.writeFloat(this.minAngle);
            __os.writeFloat(this.maxAngle);
            __os.writeFloat(this.minRange);
            __os.writeFloat(this.maxRange);
            jderobot.Time.write(__os, this.timeStamp);
        },
        function(__is)
        {
            this.distanceData = jderobot.IntSeqHelper.read(__is);
            this.numLaser = __is.readInt();
            this.minAngle = __is.readFloat();
            this.maxAngle = __is.readFloat();
            this.minRange = __is.readFloat();
            this.maxRange = __is.readFloat();
            this.timeStamp = jderobot.Time.read(__is, this.timeStamp);
        },
        false);

    jderobot.LaserDataPrx = Slice.defineProxy(Ice.ObjectPrx, jderobot.LaserData.ice_staticId, undefined);

    Slice.defineOperations(jderobot.LaserData, jderobot.LaserDataPrx);

    /**
     * Interface to the Gazebo laser sensor.
     **/
    jderobot.Laser = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::jderobot::Laser"
        ],
        -1, undefined, undefined, false);

    jderobot.LaserPrx = Slice.defineProxy(Ice.ObjectPrx, jderobot.Laser.ice_staticId, undefined);

    Slice.defineOperations(jderobot.Laser, jderobot.LaserPrx,
    {
        "getLaserData": [, 2, 2, , , ["jderobot.LaserData", true], , , , , true]
    });
    exports.jderobot = jderobot;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
