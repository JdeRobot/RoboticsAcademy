<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <!-- <arg name="enable_state_estimator" default="false" /> -->  <!-- as a comment for future possible use of state estimator -->
  <arg name="enable_mellinger_controller" default="false"/>
  <arg name="headless" default="true"/>
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="paused" value="false"/>
  <arg name="use_sim_time" value="true"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="enable_camera_sensor" default="true"/>
  <!-- uncomment to save logs -->
  <!-- <arg name="csvFilesStoring" default="false"/> -->
  <!-- <arg name="csvFilesStoringTime" default="15.0"/> --> <!-- seconds -->
  <!-- <arg name="user_account" default="your_account_name"/> -->
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="true"/>

  <!-- The following lines simulate the world in Gazebo.  -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="/RoboticsAcademy/exercises/drone_cat_mouse/web-template/drone_cat_mouse.world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  

  <group ns="$(arg mav_name)">
  <!-- FIREFLY_1 -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="enable_camera_sensor" value="$(arg enable_camera_sensor)"/>
      <arg name="log_file" value="$(arg log_file)"/>
      <!-- Set the initial position -->
      <arg name="x" value="0.0"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="0 0 0 0 2"/> <!-- args for setting the spawn point <x> <y> <z> <yaw_deg> [<delay>] -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <!--    Drone model param   -->
    <arg name="drone_model" value="$(arg mav_name)"/>
    <param name="drone_model" type="str" value="$(arg drone_model)" />
    <param name="sample_time" type="double" value= "1.0" />
    <param name="drone_state_timer_frequency" type="double" value= "0.01" />
    <param name="misc_state_timer_frequency" type="double" value= "1.0" />

    <!--    Rotors driver node   -->
    <node name="rotors_driver_node" pkg="rotors_driver" type="rotors_driver_node.py" output="screen"/>
  </group>

  <group ns="$(arg mav_name)1">
  <!-- FIREFLY_2 -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)1" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)1"/>
      <arg name="x" value="3.0"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="3 0 0 0 2"/> <!-- args for setting the spawn point <x> <y> <z> <yaw_deg> [<delay>] -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <!--    Drone model param   -->
    <arg name="drone_model" value="$(arg mav_name)1"/>
    <param name="drone_model" type="str" value="$(arg drone_model)" />
    <param name="sample_time" type="double" value= "1.0" />
    <param name="drone_state_timer_frequency" type="double" value= "0.01" />
    <param name="misc_state_timer_frequency" type="double" value= "1.0" />


    <!--    Rotors driver node   -->
    <node name="rotors_driver_node" pkg="rotors_driver" type="rotors_driver_node.py" output="screen"/>
  </group>

  
</launch>
