// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `jointmotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var RoboCompJointMotor = __M.module("RoboCompJointMotor");

    RoboCompJointMotor.HardwareFailedException = Slice.defineUserException(
        function(what, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.what = what !== undefined ? what : "";
        },
        Ice.UserException,
        "RoboCompJointMotor::HardwareFailedException",
        function(__os)
        {
            __os.writeString(this.what);
        },
        function(__is)
        {
            this.what = __is.readString();
        },
        false,
        false);

    RoboCompJointMotor.OutOfRangeException = Slice.defineUserException(
        function(what, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.what = what !== undefined ? what : "";
        },
        Ice.UserException,
        "RoboCompJointMotor::OutOfRangeException",
        function(__os)
        {
            __os.writeString(this.what);
        },
        function(__is)
        {
            this.what = __is.readString();
        },
        false,
        false);

    RoboCompJointMotor.UnknownMotorException = Slice.defineUserException(
        function(what, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.what = what !== undefined ? what : "";
        },
        Ice.UserException,
        "RoboCompJointMotor::UnknownMotorException",
        function(__os)
        {
            __os.writeString(this.what);
        },
        function(__is)
        {
            this.what = __is.readString();
        },
        false,
        false);

    RoboCompJointMotor.MotorState = Slice.defineStruct(
        function(pos, vel, power, timeStamp, p, v, isMoving)
        {
            this.pos = pos !== undefined ? pos : 0.0;
            this.vel = vel !== undefined ? vel : 0.0;
            this.power = power !== undefined ? power : 0.0;
            this.timeStamp = timeStamp !== undefined ? timeStamp : "";
            this.p = p !== undefined ? p : 0;
            this.v = v !== undefined ? v : 0;
            this.isMoving = isMoving !== undefined ? isMoving : false;
        },
        false,
        function(__os)
        {
            __os.writeFloat(this.pos);
            __os.writeFloat(this.vel);
            __os.writeFloat(this.power);
            __os.writeString(this.timeStamp);
            __os.writeInt(this.p);
            __os.writeInt(this.v);
            __os.writeBool(this.isMoving);
        },
        function(__is)
        {
            this.pos = __is.readFloat();
            this.vel = __is.readFloat();
            this.power = __is.readFloat();
            this.timeStamp = __is.readString();
            this.p = __is.readInt();
            this.v = __is.readInt();
            this.isMoving = __is.readBool();
        },
        22, 
        false);
    Slice.defineDictionary(RoboCompJointMotor, "MotorStateMap", "MotorStateMapHelper", "Ice.StringHelper", "RoboCompJointMotor.MotorState", false, undefined, undefined, Ice.HashMap.compareEquals);

    RoboCompJointMotor.MotorParams = Slice.defineStruct(
        function(name, busId, minPos, maxPos, maxVelocity, zeroPos, invertedSign)
        {
            this.name = name !== undefined ? name : "";
            this.busId = busId !== undefined ? busId : 0;
            this.minPos = minPos !== undefined ? minPos : 0.0;
            this.maxPos = maxPos !== undefined ? maxPos : 0.0;
            this.maxVelocity = maxVelocity !== undefined ? maxVelocity : 0.0;
            this.zeroPos = zeroPos !== undefined ? zeroPos : 0.0;
            this.invertedSign = invertedSign !== undefined ? invertedSign : false;
        },
        false,
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeByte(this.busId);
            __os.writeFloat(this.minPos);
            __os.writeFloat(this.maxPos);
            __os.writeFloat(this.maxVelocity);
            __os.writeFloat(this.zeroPos);
            __os.writeBool(this.invertedSign);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.busId = __is.readByte();
            this.minPos = __is.readFloat();
            this.maxPos = __is.readFloat();
            this.maxVelocity = __is.readFloat();
            this.zeroPos = __is.readFloat();
            this.invertedSign = __is.readBool();
        },
        19, 
        false);
    Slice.defineSequence(RoboCompJointMotor, "MotorParamsListHelper", "RoboCompJointMotor.MotorParams", false);

    RoboCompJointMotor.BusParams = Slice.defineStruct(
        function(handler, device, numMotors, baudRate, basicPeriod)
        {
            this.handler = handler !== undefined ? handler : "";
            this.device = device !== undefined ? device : "";
            this.numMotors = numMotors !== undefined ? numMotors : 0;
            this.baudRate = baudRate !== undefined ? baudRate : 0;
            this.basicPeriod = basicPeriod !== undefined ? basicPeriod : 0;
        },
        true,
        function(__os)
        {
            __os.writeString(this.handler);
            __os.writeString(this.device);
            __os.writeInt(this.numMotors);
            __os.writeInt(this.baudRate);
            __os.writeInt(this.basicPeriod);
        },
        function(__is)
        {
            this.handler = __is.readString();
            this.device = __is.readString();
            this.numMotors = __is.readInt();
            this.baudRate = __is.readInt();
            this.basicPeriod = __is.readInt();
        },
        14, 
        false);

    RoboCompJointMotor.MotorGoalPosition = Slice.defineStruct(
        function(name, position, maxSpeed)
        {
            this.name = name !== undefined ? name : "";
            this.position = position !== undefined ? position : 0.0;
            this.maxSpeed = maxSpeed !== undefined ? maxSpeed : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeFloat(this.position);
            __os.writeFloat(this.maxSpeed);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.position = __is.readFloat();
            this.maxSpeed = __is.readFloat();
        },
        9, 
        false);
    Slice.defineSequence(RoboCompJointMotor, "MotorGoalPositionListHelper", "RoboCompJointMotor.MotorGoalPosition", false);

    RoboCompJointMotor.MotorGoalVelocity = Slice.defineStruct(
        function(name, velocity, maxAcc)
        {
            this.name = name !== undefined ? name : "";
            this.velocity = velocity !== undefined ? velocity : 0.0;
            this.maxAcc = maxAcc !== undefined ? maxAcc : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeFloat(this.velocity);
            __os.writeFloat(this.maxAcc);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.velocity = __is.readFloat();
            this.maxAcc = __is.readFloat();
        },
        9, 
        false);
    Slice.defineSequence(RoboCompJointMotor, "MotorListHelper", "Ice.StringHelper", false);

    RoboCompJointMotor.JointMotor = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::RoboCompJointMotor::JointMotor"
        ],
        -1, undefined, undefined, false);

    RoboCompJointMotor.JointMotorPrx = Slice.defineProxy(Ice.ObjectPrx, RoboCompJointMotor.JointMotor.ice_staticId, undefined);

    Slice.defineOperations(RoboCompJointMotor.JointMotor, RoboCompJointMotor.JointMotorPrx,
    {
        "setPosition": [, , , , , , [[RoboCompJointMotor.MotorGoalPosition]], , 
        [
            RoboCompJointMotor.HardwareFailedException,
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "setVelocity": [, , , , , , [[RoboCompJointMotor.MotorGoalVelocity]], , 
        [
            RoboCompJointMotor.HardwareFailedException,
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "setSyncPosition": [, , , , , , [["RoboCompJointMotor.MotorGoalPositionListHelper"]], , 
        [
            RoboCompJointMotor.HardwareFailedException,
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "getMotorParams": [, , , , , [RoboCompJointMotor.MotorParams], [[7]], , 
        [
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "getMotorState": [, , , , , [RoboCompJointMotor.MotorState], [[7]], , 
        [
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "getMotorStateMap": [, , , , , ["RoboCompJointMotor.MotorStateMapHelper"], [["RoboCompJointMotor.MotorListHelper"]], , 
        [
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "getAllMotorState": [, , , , , , , [["RoboCompJointMotor.MotorStateMapHelper"]], 
        [
            RoboCompJointMotor.UnknownMotorException
        ], , ],
        "getAllMotorParams": [, , , , , ["RoboCompJointMotor.MotorParamsListHelper"], , , , , ],
        "getBusParams": [, , , , , [RoboCompJointMotor.BusParams], , , , , ]
    });
    exports.RoboCompJointMotor = RoboCompJointMotor;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
